using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using ToucanServices.Services.API.Models.Spacedock;
using ToucanServices.Services.Data;
using ToucanServices.SpacedockAPI;
using ToucanServices.SpacedockAPI.Models;

namespace ToucanServices.Services.API.Types.Spacedock
{

    public class SpacedockBrowse
    {
        /// <summary>
        /// Due to technical diffuculties relating to the spacedock.info/api/browse/ endpoint
        /// you can only specify the SortingDirection, SortBy and BrowseResultAmount when BrowseCategory is equal to 
        /// BrowseCategories.Default. I do not know why this is, I do not know how this is and I do 
        /// not know what this is. And due to this restraint I am unsure if the code works as 
        /// it should, so if you encounter wierd and icky bugs with the url being wrong take 4
        /// another look here.
        /// </summary>
        /// <param name="BrowseCategory"></param>
        /// <param name="Page"></param>
        /// <param name="SortyBy"></param>
        /// <param name="SortingDirection"></param>
        /// <param name="BrowseResultAmount"></param>
        /// <returns>A string from which represents the ULR for a specific browse api endpoint with settings</returns>
        public static string GetBrowseApiUrl(BrowseCategories BrowseCategory, UInt32 Page, SortBy SortyBy, SortingDirection SortingDirection, UInt32 BrowseResultAmount)
        {
            string Url = $"https://spacedock.info/api/browse";

            if (BrowseCategory != BrowseCategories.DEFAULT) // Default Value
            {
                if (BrowseCategory == BrowseCategories.TOP) { Url = Url + "/top"; }
                else if (BrowseCategory == BrowseCategories.FEATURED) { Url = Url + "/featured"; }
                else if (BrowseCategory == BrowseCategories.NEW) { Url = Url + "/new"; }
            }

            Url = Page != 0 || Page != 1 ? $"{Url}?page={Page}" : $"{Url}?page=1";

            if (SortyBy != SortBy.CREATED) // Default Value
            {
                if (SortyBy == SortBy.NAME) { Url = $"{Url}&orderby=name"; }
                else if (SortyBy == SortBy.UPDATED) { Url = $"{Url}&orderby=updated"; }
            }

            Url = SortingDirection == SortingDirection.ASC ? Url : $"{Url}&order=desc";

            Url = BrowseResultAmount != 0 ? $"{Url}&count={Page}" : $"{Url}&count=30";

            return Url;
        }

        /// <summary>
        /// Retrieves the Json contents in a string from a url generated by the input 
        /// variables using the GetBrowseApiUrl() function.
        /// </summary>
        /// <param name="BrowseCategory"></param>
        /// <param name="Page"></param>
        /// <param name="SortyBy"></param>
        /// <param name="SortingDirection"></param>
        /// <param name="BrowseResultAmount"></param>
        /// <returns></returns>
        public static async Task<string> GetBrowseJsonString(BrowseCategories BrowseCategory, UInt32 Page, SortBy SortyBy, SortingDirection SortingDirection, UInt32 BrowseResultAmount)
        {
            string? BrowseUrl = GetBrowseApiUrl(BrowseCategory, Page, SortyBy, SortingDirection, BrowseResultAmount);

            HttpClient ToucanHttpClient = ServicesHandler.GetHttpClient();

            HttpResponseMessage ToucanHttpClientResponse = await ToucanHttpClient.GetAsync(BrowseUrl);
            ToucanHttpClientResponse.EnsureSuccessStatusCode();
            string ResponseContentJsonString = await ToucanHttpClientResponse.Content.ReadAsStringAsync();
            return ResponseContentJsonString;
        }

        /// <summary>
        /// Retrieves the response from GetBrowseJsonString() and JObject.Parse()s it to 
        /// a JObject before returning it.
        /// </summary>
        /// <param name="BrowseCategory"></param>
        /// <param name="Page"></param>
        /// <param name="SortyBy"></param>
        /// <param name="SortingDirection"></param>
        /// <param name="BrowseResultAmount"></param>
        /// <returns></returns>
        public static async Task<JObject> GetBrowseJson(BrowseCategories BrowseCategory, UInt32 Page, SortBy SortyBy, SortingDirection SortingDirection, UInt32 BrowseResultAmount)
            => JObject.Parse(await GetBrowseJsonString(BrowseCategory, Page, SortyBy, SortingDirection, BrowseResultAmount));

        /// <summary>
        /// Retrieves the contents of the string response from the GetBrowseJsonString() 
        /// function and JsonConver.DeserializeObject<MODEL>()s before returning it.
        /// </summary>
        /// <param name="BrowseCategory"></param>
        /// <param name="Page"></param>
        /// <param name="SortyBy"></param>
        /// <param name="SortingDirection"></param>
        /// <param name="BrowseResultAmount"></param>
        /// <returns></returns>
        public static async Task<SpacedockBrowseModel> GetBrowseModel(BrowseCategories BrowseCategory, UInt32 Page, SortBy SortyBy, SortingDirection SortingDirection, UInt32 BrowseResultAmount)
        {
            if (BrowseCategory == BrowseCategories.DEFAULT) return JsonConvert.DeserializeObject<SpacedockBrowseModel>(await GetBrowseJsonString(BrowseCategory, Page, SortyBy, SortingDirection, BrowseResultAmount));

            SpacedockBrowseModel NewSpacedockBrowseModel = new SpacedockBrowseModel
            {
                Page = Page,
                Results = JsonConvert.DeserializeObject<SpacedockBrowseResult[]>(await GetBrowseJsonString(BrowseCategory, Page, SortyBy, SortingDirection, BrowseResultAmount))
                            ?? throw new Exception("Results from attempt at recieving the json string using a type other than default is for some reason null.")
            };

            return NewSpacedockBrowseModel;
        }
    }
}
