using System.Text.RegularExpressions;

namespace ToucanServices.Data.Versioning
{
    /// <summary>
    /// The default for the toucan server is semantic. In the toucan client however it will be arbitrary just due to how spacedock handles
    /// it's versioning, which is arbitrary. Arbitrary also requres a date stored which is used to compare and sort versions.
    /// </summary>
    public enum VersioningType
    {
        Semantic,
        Arbitrary
    };

    public struct VersionCreateInfo
    {
        /* Versioning */

        /// <summary>
        /// The Version class acts differently based off of which type this is set to. 
        /// </summary>
        public VersioningType VersioningType { get; private set; }

        /* Semantic Version */

        /// <summary>
        /// **Semantic Version Variable**
        /// 
        /// The version prefix of the version. This string represents the part of the version which is at the very start.
        /// The version prefix is often just a simple 'v'. One important thing to note is that this string does not 
        /// accept numbers so it will throw an error if the regular expression generated by ChatGPT detects any.
        /// 
        /// VersionPrefix is not a part of the evalutaion process.
        /// 
        /// This variable is NOT REQUIRED to ever be populated and you should be able to leave this empty without ever 
        /// recieving errors because of it.
        /// </summary>
        public string VersionPrefix { get; set; }

        /// <summary>
        /// **Semantic Version Variable**
        /// 
        /// An array of version numbers that make up the semantic version number, including major, minor, and patch numbers.
        /// The number of version parts can vary depending on the software, but typically there are three numbers.
        /// Some software may use four or more numbers, but this format may not follow the semantic versioning convention.
        /// 
        /// The version numbers are evaluated from left to right to determine the highest version. If two versions have the
        /// same version numbers, the one with no version identifier or build metadata is considered the highest version.
        /// 
        /// This variable is REQUIRED to be populated if this.VersioningType is equal to Semantic, if not, this value 
        /// will never be used, referenced or needed and that means that it should never throw errors.
        /// </summary>
        public uint[] VersionParts { get; set; }

        /// <summary>
        /// **Semantic Version Variable**
        /// 
        /// A string that represents the pre-release version identifier, which is added after the version numbers in a 
        /// semantic version number. For example, the string "alpha" or "beta" could be used as a version identifier to 
        /// indicate that the software is in a pre-release or testing phase. The version identifier is included in a full 
        /// semantic version number along with the version numbers and build metadata, with a hyphen (-) separating the 
        /// version identifier from the version numbers and a plus sign (+) separating the version numbers from the 
        /// build metadata.
        /// 
        /// This variable is NOT REQUIRED to ever be populated and you should be able to leave this empty without ever 
        /// recieving errors because of it.
        /// </summary>
        public string VersionIdentifier { get; set; }

        /// <summary>
        /// **Semantic Version Variable**
        /// 
        /// A string that represents build metadata for the software package. Build metadata provides additional information
        /// about the build process or environment, such as the date of the build or the commit hash in the source control system.
        /// The build metadata is included in a full semantic version number along with the version numbers and version
        /// identifier, with a plus sign (+) separating the version numbers from the build metadata.
        ///         
        /// This variable is NOT REQUIRED to ever be populated and you should be able to leave this empty without ever 
        /// recieving errors because of it.
        /// </summary>
        public string BuildMetadata { get; set; }

        /* Arbitrary Version */

        /// <summary>
        /// **Arbitrary Version Variable**
        /// A string representing the verison of the Version class. This string can contain virually anything. Using 
        /// the arbitrary verisoning type instead of the normal semantic one is something you rarely want to do 
        /// except for if you are spacedock.info/mod/1461, then its for some reason accepted to do. 
        /// 
        /// Evaluated can only be done if this.Date is also set to something, if it isnt the CompareTo() function 
        /// of the Version class will just return 0(well not exactly, if you want more information read this.Date's 
        /// summary).
        /// 
        /// This variable is REQUIRED to be populated if this.VersioningType is equal to Arbitrary, if not, this value 
        /// will never be used, referenced or needed and that means that it should never throw errors.
        /// </summary>
        public string ArbitraryVersion { get; set; }

        /// <summary>
        /// **Arbitrary Version Variable**
        /// DateTimeOffset which should represent when the version was created/published/etc.
        /// 
        /// This variable is NOT REQUIRED to ever be populated and you should be able to leave this empty without ever 
        /// recieving errors because of it.
        /// </summary>
        public DateTimeOffset Date { get; set; }

        /// <summary>
        /// The constructor sets the version type immediately and this is the only time the Tyoe is set.
        /// </summary>
        /// <param name="Type"></param>
        public VersionCreateInfo(VersioningType Type)
        {
            VersioningType = Type;

            // Sets all the oher values to 0 as they will be modified after this line.
            VersionPrefix = string.Empty;
            VersionParts = new uint[0];
            VersionIdentifier = string.Empty;
            BuildMetadata = string.Empty;
            ArbitraryVersion = string.Empty;
            Date = DateTimeOffset.MinValue;
        }
    }

    public static class Convert
    {
        /// <summary>
        /// Use this to convert a string to a semantic version, if it fails it will throw an error and return an 
        /// arbitrary version with no date.
        /// </summary>
        /// <param name="VersionString"></param>
        /// <returns>A create info with the correct information.</returns>
        public static VersionCreateInfo FromString(string VersionString) 
        {
            try
            {
                VersionCreateInfo NewSemanticVersionCreateInfo = new VersionCreateInfo(VersioningType.Semantic);
                
                // Sets the prefix
                Regex VersionRegex = new Regex("^([a-zA-Z]*)?(.*)$");
                Match VersionMatch = VersionRegex.Match(VersionString);
                NewSemanticVersionCreateInfo.VersionPrefix = VersionMatch.Groups[1].Value; // Removes whatever text is in front of the first number appearing, this is the reason to why we are using try/catch as if the first number in the string isnt the major things go south fast
                VersionString = VersionMatch.Groups[2].Value; // Sets the input string to something more human friendly

                // Version Parts
                string[] VersionPartsString = VersionString.Split(".");
                NewSemanticVersionCreateInfo.VersionParts = new UInt32[VersionPartsString.Length];

                for (int i = 0; i < VersionPartsString.Length; i++)
                {
                    if (i == (VersionPartsString.Length - 1))
                    {
                        VersionPartsString[i] = VersionPartsString[i].Split("-")[0];  // Removes the pre release version identifier from the last version part
                        VersionPartsString[i] = VersionPartsString[i].Split("+")[0];  // Removes the build metadata from the last version part.
                    }

                    NewSemanticVersionCreateInfo.VersionParts[i] = UInt32.Parse(VersionPartsString[i]);
                }

                // Version Identifier
                List<string> VersionIdentifierString = VersionString.Split("-").ToList();
                VersionIdentifierString.RemoveAt(0);
                NewSemanticVersionCreateInfo.VersionIdentifier = string.Join("-", VersionIdentifierString).Split("+")[0];

                // Build Metadata
                List<string> BuildMetadataString = VersionString.Split("+").ToList();
                BuildMetadataString.RemoveAt(0);
                NewSemanticVersionCreateInfo.BuildMetadata = string.Join("+", BuildMetadataString);

                return NewSemanticVersionCreateInfo;
            } 
            catch
            {
                VersionCreateInfo AbortInfo = new VersionCreateInfo(VersioningType.Arbitrary);
                AbortInfo.ArbitraryVersion = VersionString;
                return AbortInfo;

                throw;
            }
        }
    }
}
